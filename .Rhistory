# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la funcio}ón c() y las listas creadas con la función list()?.
# RTA:
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la
# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la función c() y las listas creadas con la función list()?.
# RTA:
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la diferenci
# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la función c() y las listas creadas con la función list()?.
## RTA: La principal diferencia entre los vectores creados con la función c() y las listas creadas con la función list(), es los vectores de la función c() solo pueden tener un único elemento, mientras que los vectores función list(), peude
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la diferencia entre ejecutar mi_lista[0] y mi_lista[[0]]?
## RTA:
# Punto 2. Extracción de Elementos
# Teniendo en cuenta la matriz descripta en el siguiente bloque de código, escriba los comandos para extraer:
#a. La segunda columna únicamente.
#b. La tercera fila únicamente.
#c. De la fila 3 a la fila 7.
#d. Las columnas 2 a 4 de las filas 1 y 2.
matriz <- matrix(rep(1:7, 4), ncol = 4, nrow = 7, byrow = TRUE)
# Solución:
## Literal a.
## Literal b.
## Literal c.
## Literal d.
mi_lista[0]
mi_lista[[0]]
View(matriz)
# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la función c() y las listas creadas con la función
#list()?.
## RTA: La principal diferencia es que los vectores de la función c() conocido también como vector unidimensional,
## como su nombre lo indica solo pueden tener o usar elementos de una misma dimensión, mientras que los vectores
## función list(), se peuden tener o usar 2 o más elementos de diferentes dimensiones.
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la diferencia entre ejecutar mi_lista[0]
#y mi_lista[[0]]?
## RTA: mi_lista[[0]] se usa en listas
# Punto 2. Extracción de Elementos
# Teniendo en cuenta la matriz descripta en el siguiente bloque de código, escriba los comandos para extraer:
#a. La segunda columna únicamente.
#b. La tercera fila únicamente.
#c. De la fila 3 a la fila 7.
#d. Las columnas 2 a 4 de las filas 1 y 2.
matriz <- matrix(rep(1:7, 4), ncol = 4, nrow = 7, byrow = TRUE)
# Solución:
## Literal a.
## Literal b.
## Literal c.
## Literal d.
# Punto 3. If
# Usando un loop if y condicionales, escriba una serie de comandos que determinen si un número específico es par o
# impar.
Estructura
numero <- 5
# Solución:
if (________) {
________
} else if () {
________
}
# Punto 4. For
# Usando un vector con una serie de nombres, escriba el código correspondiente para un loop for que imprima en consola
#el mensaje Bienvenido {nombre} para cada nombre.
nombres <- c("Andrea", "Carlos", "Juan", "Carolina", "Fernando", "Laura")
# Solución:
for (__________) {
____________
}
# Punto 5. Funciones
# Escriba una función que reciba dos argumentos - el número a y el número b -, que devuelva el número a elevado al
# número b. Por ejemplo, si a = 2, y b = 3, la función devería devolver 8.
# Además, si el usuario no define el número b, la función debería asignar un valor por defecto de 1 a esta variable.
# Solución:
mi_funcion <- function(__________) {
return(__________)
}
respuesta <- mi_funcion(__________)
# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la función c() y las listas creadas con la función
#list()?.
## RTA: La principal diferencia es que los vectores de la función c() conocido también como vector unidimensional,
## como su nombre lo indica solo pueden tener o usar elementos de una misma dimensión, mientras que los vectores
## función list(), se peuden tener o usar 2 o más elementos de diferentes dimensiones.
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la diferencia entre ejecutar mi_lista[0]
#y mi_lista[[0]]?
## RTA: La diferencia es que mi_lista[0] se utiliza para extraer la lista con el elemento que deseamos seleccionar,
## mientras que mi_lista[[0]] se usa cuando vamos a extraer el elemento deseado.
# Punto 2. Extracción de Elementos
# Teniendo en cuenta la matriz descripta en el siguiente bloque de código, escriba los comandos para extraer:
#a. La segunda columna únicamente.
#b. La tercera fila únicamente.
#c. De la fila 3 a la fila 7.
#d. Las columnas 2 a 4 de las filas 1 y 2.
matriz <- matrix(rep(1:7, 4), ncol = 4, nrow = 7, byrow = TRUE)
# Solución:
## Literal a.
matriz[,2]
## Literal b.
matriz[3,]
## Literal c.
matriz[3:7,]
## Literal d.
matriz[1:2,2:4]
# Punto 3. If
# Usando un loop if y condicionales, escriba una serie de comandos que determinen si un número específico es par o
# impar.
Estructura
numero <- 5
# Solución:
if (________) {
________
} else if () {
________
}
# Punto 4. For
# Usando un vector con una serie de nombres, escriba el código correspondiente para un loop for que imprima en consola
#el mensaje Bienvenido {nombre} para cada nombre.
nombres <- c("Andrea", "Carlos", "Juan", "Carolina", "Fernando", "Laura")
# Solución:
for (__________) {
____________
}
# Punto 5. Funciones
# Escriba una función que reciba dos argumentos - el número a y el número b -, que devuelva el número a elevado al
# número b. Por ejemplo, si a = 2, y b = 3, la función devería devolver 8.
# Además, si el usuario no define el número b, la función debería asignar un valor por defecto de 1 a esta variable.
# Solución:
mi_funcion <- function(__________) {
return(__________)
}
respuesta <- mi_funcion(__________)
# ANÁLISIS DE DATOS CON R
# TALLER MODULO 1
# Integrantes: Lina Roncancio, Fredy Gonzalez y Fabián Lasso
# Solución
# Punto 1. Vectores y Listas
#a. ¿Cuál es la principal diferencia entre los vectores creados con la función c() y las listas creadas con la función
#list()?.
## RTA: La principal diferencia es que los vectores de la función c() conocido también como vector unidimensional,
## como su nombre lo indica solo pueden tener o usar elementos de una misma dimensión, mientras que los vectores
## función list(), se peuden tener o usar 2 o más elementos de diferentes dimensiones.
#b. Suponga que tiene una lista de n elementos llamada mi_lista ¿Cuál es la diferencia entre ejecutar mi_lista[0]
#y mi_lista[[0]]?
## RTA: La diferencia es que mi_lista[0] se utiliza para extraer la lista con el elemento que deseamos seleccionar,
## mientras que mi_lista[[0]] se usa cuando vamos a extraer el elemento deseado.
# Punto 2. Extracción de Elementos
# Teniendo en cuenta la matriz descripta en el siguiente bloque de código, escriba los comandos para extraer:
#a. La segunda columna únicamente.
#b. La tercera fila únicamente.
#c. De la fila 3 a la fila 7.
#d. Las columnas 2 a 4 de las filas 1 y 2.
matriz <- matrix(rep(1:7, 4), ncol = 4, nrow = 7, byrow = TRUE)
# Solución:
## Literal a.
matriz[,2]
## Literal b.
matriz[3,]
## Literal c.
matriz[3:7,]
## Literal d.
matriz[1:2,2:4]
# Punto 3. If
# Usando un loop if y condicionales, escriba una serie de comandos que determinen si un número específico es par o
# impar.
Estructura
numero <- 5
# Solución:
if (________) {
________
} else if () {
________
}
# Punto 4. For
# Usando un vector con una serie de nombres, escriba el código correspondiente para un loop for que imprima en consola
#el mensaje Bienvenido {nombre} para cada nombre.
nombres <- c("Andrea", "Carlos", "Juan", "Carolina", "Fernando", "Laura")
# Solución:
for (__________) {
____________
}
# Punto 5. Funciones
# Escriba una función que reciba dos argumentos - el número a y el número b -, que devuelva el número a elevado al
# número b. Por ejemplo, si a = 2, y b = 3, la función devería devolver 8.
# Además, si el usuario no define el número b, la función debería asignar un valor por defecto de 1 a esta variable.
# Solución:
mi_funcion <- function(__________) {
return(__________)
}
respuesta <- mi_funcion(__________)
